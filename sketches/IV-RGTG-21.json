{
  "version": "1.3.5",
  "revision": 40,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "name": "bnhn4_006",
      "mod": "1615565089845",
      "type": "sketch",
      "parent": "cc_bnhn4_20210312",
      "code": "let credits = { \n    \"student_names\": \"Illia Dolbniev, Vladyslav Boyko\", \n    \"tool_name\": \"IV-RGTG-21\", \n    \"tool_info\": \"A secret development that may have been stolen during the Area 51 raid. Or may have not. A glitchy playground for generating random type distortion.\" \n};\n\nlet txt = \"lya boo\";\nlet font, points;\nlet vertSlider, bSlider, sizeSlider, sampleSlider, strokeSlider;\nlet checkbox, checkBoxVertex;\nlet sel;\nlet alpha = 0;\nlet myInput\nlet description\n\nlet valXMain, valYMain;\n\nlet valX1, valY1, valX2, valY2, valX3, valY3;\nlet vals = [];\n\nlet outline;\nlet xAxis = [valX1, valX2, valX3];\nlet yAxis = [valY1, valY2, valY3];\n\n\n\nlet buttonExport;\n\nfunction preload() {\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\");\n}\n\nfunction setup() {\n\n\tcreateCanvas(windowWidth, windowHeight);\n\t\n\tbuttonExport = createButton('EXPORT SNAPSHOT');\n\tbuttonExport.position(width/2 + 490, 235);\n\tbuttonExport.mousePressed(exportImage);\n\tbackground(0);\n\n\tvals.push(createVector(0, 0));\n\tvals.push(createVector(0, 0));\n\tvals.push(createVector(0, 0));\n\n\tdescription = createP('IV-RGTG-21 is a secret development that may have been stolen during the Area 51 raid. Or may have not. </br> A glitchy playground for generating random type distortion. </br> </br>Created by Illia Dolbniev and Vlad boyko </br> during a workshop led by Ted Davis.');\n\tdescription.position(width / 3 + 200, 10);\n\tdescription.size(400, 300);\n\tdescription.style('font-size', '15px');\n\tdescription.style('color', '#ffffff');\n\tdescription.style('font-family', 'Helvetica');\n\n\tvertSlider = createSlider(-700, 700, 0, 1);\n\tvertSlider.position(width / 2 + 500, 60);\n\n\tbSlider = createSlider(-height / 3, height / 3, 0, 10);\n\tbSlider.position(width / 2 + 500, 85);\n\n\tsampleSlider = createSlider(.005, .1, .08, .005);\n\tsampleSlider.position(width / 2 + 500, 110);\n\n\tsizeSlider = createSlider(100, 800, 250, 10);\n\tsizeSlider.position(width / 2 + 500, 135);\n\n\tstrokeSlider = createSlider(.5, 10, 2, .5);\n\tstrokeSlider.position(width / 2 + 500, 160);\n\n\tmyInput = createInput(txt);\n\tmyInput.position(width / 2 + 484, 20);\n\tmyInput.input(textIn);\n\n\tcheckbox = createCheckbox('', false);\n\tcheckbox.position(width / 2 + 500, 195);\n\tcheckbox.changed(fillSwitch);\n\n\tcheckBoxVertex = createCheckbox('', false);\n\tcheckBoxVertex.position(width / 2 + 525, 195)\n\tcheckBoxVertex.changed(vertexSwitch);\n\toutline = curveVertex;\n\n\tsel = createSelect();\n\tsel.position(width / 2 + 595, 195);\n\tsel.option('1');\n\tsel.option('2');\n\tsel.option('3');\n\tsel.selected('1');\n\tsel.changed(selectDist);\n\t\n\twindowResized = function() {\n\t\tresizeCanvas(windowWidth, windowHeight)\n\t\tguiPosition()\n\t}\n\n}\n\nfunction guiPosition(){\n\tbuttonExport.position(width/2 + 490, 235);\n\tvertSlider.position(width / 2 + 500, 60);\n\tsampleSlider.position(width / 2 + 500, 110);\n\tbSlider.position(width / 2 + 500, 85);\n\tsizeSlider.position(width / 2 + 500, 135);\n\tstrokeSlider.position(width / 2 + 500, 160);\n\tmyInput.position(width / 2 + 484, 20);\n\tcheckbox.position(width / 2 + 500, 195);\n\tcheckBoxVertex.position(width / 2 + 525, 195);\t\n\tdescription.position(width / 3 + 200, 20);\n\tsel.position(width / 2 + 595, 195);\n}\n\nfunction draw() {\n\tbackground(0, 35);\n\t\n\tgenType(txt, sizeSlider.value());\n\n\ttranslate(width / 2, height / 2);\n\t\n\tfill(155, 255, 250, alpha);\n\tstroke(155, 255, 250);\n\tstrokeWeight(strokeSlider.value());\n\t\n\tbeginShape(); \n\n\tlet randoVal = floor(random(vals.length));\n\n\tfor(let i = 0; i < points.length; i++) {\n\t\tlet p = points[i];\n\n\t\tlet offset = 0;\n\n\t\tif(frameCount % floor(random(10, 100)) == 0) {\n\t\t\toffset = random(-100, 100);\n\t\t}\n\n\t\tvalX1 = p.x + random(frameCount / sin(frameCount * .03) * .0002);\n\t\tvalY1 = p.y + random(vertSlider.value()/ 2);\n\t\tvals[0] = createVector(valX1, valY1);\n\n\t\tvalX2 = p.x + random(sin(p.x) * bSlider.value() * 2);\n\t\tvalY2 = p.y / (i * ((vertSlider.value() + 200) / 30000));\n\t\tvals[1] = createVector(valX2, valY2);\n\n\t\tvalX3 = frameCount % p.x - offset + ((i * .006) * vertSlider.value());\n\t\tvalY3 = p.y + random(bSlider.value());\n\t\tvals[2] = createVector(valX3, valY3);\n\n\t\tlet valsSelect = sel.value() - 1;\n\n\t\toutline(vals[valsSelect].x, vals[valsSelect].y);\n\t}\n\tendShape(CLOSE);\n}\n\nfunction selectDist() {\n\tlet item = sel.value();\n\n\tconsole.log(item + ' selected!');\n}\n\nfunction vertexSwitch() {\n\tif(checkBoxVertex.checked()) {\n\t\toutline = vertex;\n\t} else {\n\t\toutline = curveVertex;\n\t}\n}\n\nfunction fillSwitch() {\n\tif(this.checked()) {\n\t\talpha = 255;\n\t} else {\n\t\talpha = 0;\n\t}\n}\n\nfunction textIn() {\n\ttxt = this.value(); \n}\n\nfunction exportImage(){\n\tsave(\"RV-RGTG-21-Snapshot.jpg\");\n}\n\nfunction genType(txtString, txtSize) {\n\tlet bounds = font.textBounds(txtString, 0, 0, txtSize);\n\tlet factor = sampleSlider.value()\n\n\t// textToPoints(txt, x, y, size, options) \n\tpoints = font.textToPoints(txtString, -bounds.w / 2, bounds.h / 2, txtSize, {\n\t\tsampleFactor: sampleSlider.value(),\n\t\tsimplifyThreshold: 0\n\t});\n}"
    }
  ]
}