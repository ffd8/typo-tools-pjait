{
  "version": "1.3.5",
  "revision": 40,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "Wind_Display",
      "mod": 1615562863711,
      "code": "let credits = {\r\n\t\"student_names\": \"Cian Jochem, Alick Rodionova\",\r\n\t\"tool_name\": \"WindDisplay\",\r\n\t\"tool_info\": \"«WindDisplay» shows the current wind conditions worldwide. The typography is influenced by real-time data, such as wind strength and wind direction. The tool can be individualized by different sliders.\"\r\n}\r\n\r\n\r\n\r\nlet weather, weather2, font, points;\r\nlet weathers = [];\r\nlet weatherSel = 0;\r\nlet buttonChange;\r\nlet sliderStrokeWeight;\r\nlet colorPicker;\r\nlet buttonExport;\r\nlet myNum;\r\n\r\n\r\nfunction preload() {\r\n\tfont = loadFont(\"includes/demos-data/fonts/RobotoMono-Regular.otf\");\r\n\tgetWeather('2661604'); // basel\r\n\tgetWeather('756135'); // warsaw\r\n\tgetWeather('3143244'); // oslo\r\n\tgetWeather('1835847'); // seoul\r\n\tgetWeather('1275004'); // kolkata\r\n\tgetWeather('5368361'); // la\r\n\tgetWeather('379252'); // khartoum\r\n\tgetWeather('2158177'); // melbourne\r\n\tgetWeather('3688689'); // bogota\r\n\tgetWeather('993800'); // johannesburg\r\n\tgetWeather('6696480'); // mcmurdo\r\n\tgetWeather('3435907'); // buenos aires\r\n\tgetWeather('5128581'); // ny\r\n\tgetWeather('3953687'); // lima\r\n\t\r\n}\r\n\r\nfunction setup() {\r\n\tcreateCanvas(windowWidth, windowHeight);\r\n\ttextAlign(CENTER);\r\n\r\n\t//GUI\r\n\tsliderStrokeWeight = createSlider(.5, 5, 1, .5); //min,max,default,stepSize\r\n\tsliderStrokeWeight.position(width - 250, 220);\r\n\tsliderStrokeWeight.size(150, 20);\r\n\r\n\tcolorPicker = createColorPicker('City');\r\n\tcolorPicker.position(width - 250, 180);\r\n\tcolorPicker.size(145, 20);\r\n\r\n\tbuttoneExport = createButton('export png')\r\n\tbuttoneExport.position(width - 250, 100);\r\n\tbuttoneExport.size(150, 20);\r\n\tbuttoneExport.mousePressed(exportImage);\r\n\r\n\tmySelect = createSelect(); // create dropdown \r\n\tmySelect.position(width - 250, 140); // set position ¨\r\n\tmySelect.size(150, 20);\r\n\t//mySelect.textAlign(CENTER)\r\n\tmySelect.option('wavy'); // add option \r\n\tmySelect.option('lined'); // add option\r\n\r\n\t//genType('Basel', width/4); // call function below to get points\r\n\t//noLoop();\r\n\r\n\t//Warsaw: id=756135;\r\n\t//Basel: id=2661604;\r\n\t//Wellington: id=1252887;\r\n\r\n\r\n}\r\n\r\n//ID TO URL\r\nfunction getWeather(id) {\r\n\tlet tempURL =\r\n\t\t'https://api.openweathermap.org/data/2.5/weather?' +\r\n\t\t'id=' + id +\r\n\t\t'&appid=9cedea332d1b6b44760f961d66d1be98';\r\n\r\n\tloadJSON(tempURL, function(data) {\r\n\t\tdata.size = random(15, 50)\r\n\t\tweathers.push(data); // add to array\r\n\t});\r\n}\r\n\r\n//DEGREE TO COMPASS\r\nfunction degToCompass(myNum) {\r\n\tvar val = Math.floor((myNum / 22.5) + 0.5);\r\n\tvar arr = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"];\r\n\treturn arr[(val % 16)];\r\n}\r\n\r\nfunction draw() {\r\n\tbackground(0);\r\n\r\n\t// print(weathers)\r\n\r\n\r\n\ttranslate(width / 2, height / 2); // set 0, 0 point to center \r\n\tnoFill();\r\n\ttextSize(30)\r\n\tstrokeWeight(sliderStrokeWeight.value())\r\n\tstroke(colorPicker.color());\r\n\r\n\r\n\t\r\n\r\n\t//MOUSE X CHANGE CITY\r\n\t// if(mouseX < width / 3) {\r\n\t// \tweatherSel = 0;\r\n\t// \t//background(255)\r\n\t// \t//stroke(0)\r\n\t// } else if(mouseX > width / 3 && mouseX < width / 3 + width / 3) {\r\n\t// \tweatherSel = 1;\r\n\t// } else if(mouseX > width / 3 + width / 3) {\r\n\t// \tweatherSel = 2;\r\n\t// }\r\n\r\n\tlet weatherCity = weathers[weatherSel].name;\r\n\tlet windSpeed = weathers[weatherSel].wind.speed;\r\n\tlet windDirection = weathers[weatherSel].wind.deg;\r\n\r\n\r\n\t//PLOT POINTS ON MAP\r\n\tpush()\r\n\tfor(let i = 0; i < weathers.length; i++) {\r\n\t\t// print(weathers[i].coord.lat)\r\n\t\tlet weatherLon = map(weathers[i].coord.lon, -180, 180, -width / 2, width / 2);\r\n\t\tlet weatherLat = map(weathers[i].coord.lat, -90, 90, height / 2, -height / 2);\r\n\t\t//print(weatherLon)\r\n\t\tnoFill()\r\n\t\t// translate(-width/2, -height/2);\r\n\t\t\r\n\t\t// used to set active dot\r\n\t\tlet eSize = dist(weatherLon, weatherLat, mouseX-width/2, mouseY-height/2);\r\n\t\tif(eSize < weathers[i].size/2){\r\n\t\t\tweatherSel = i;\r\n\t\t}\r\n\t\t\r\n\t\tif(i == weatherSel){\r\n\t\t\tfill(255)\r\n\t\t}\r\n\t\t\r\n\t\tellipse(weatherLon, weatherLat, weathers[i].size, weathers[i].size)\r\n\t}\r\n\tpop()\r\n\r\n\r\n\r\n\tlet windSpeedMap = map(windSpeed, 1, 15, 0, 250)\r\n\r\n\r\n\t//TYPOGRAPHY\r\n\tgenType(weatherCity, width / 8);\r\n\r\n\r\n\t//DEGREES TO COORDINATES\r\n\tlet myDegrees = windDirection;\r\n\t// Create a p5.Vector using the fromAngle function,\r\n\t// and extract its x and y components.\r\n\tlet v = p5.Vector.fromAngle(radians(windDirection), sin(frameCount * .07) * windSpeed * 20);\r\n\r\n\r\n\t//DRAW SHAPE\r\n\t// cycle through array of points \r\n\r\n\tif(mySelect.value() == 'wavy') {\r\n\t\tbeginShape();\r\n\t\tfor(let j = 0; j < points.length; j++) {\r\n\t\t\tlet p = points[j]; // grab each point by index (p5.vector) \r\n\r\n\t\t\tcurveVertex(p.x, p.y)\r\n\t\t\tif(j % 2 == 0) {\r\n\t\t\t\tvertex(p.x + v.x, p.y + v.y)\r\n\t\t\t}\r\n\t\t\t//line(p.x, p.y, p.x+v.x, p.y+v.y)\r\n\t\t\t// line(p.x, p.y, p.x+v.x, p.y+v.y+random(5))\r\n\t\t}\r\n\t\tendShape(CLOSE)\r\n\r\n\t} else if(mySelect.value() == 'lined') {\r\n\t\tfor(let j = 0; j < points.length; j++) {\r\n\t\t\tlet p = points[j]; // grab each point by index (p5.vector) \r\n\t\t\tv = p5.Vector.fromAngle(radians(windDirection), windSpeed * 20);\r\n\t\t\t//line(p.x, p.y, p.x+v.x, p.y+v.y)\r\n\t\t\tline(p.x, p.y, p.x + v.x, p.y + v.y + random(windSpeed))\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//COMPASS\r\n\tlet myDirection = degToCompass(windDirection);\r\n\r\n\r\n\t//INFO TEXT\r\n\ttext(windSpeed + ' m/s', 0, -370);\r\n\ttext(windDirection + '° ' + myDirection, 0, 370)\r\n\t//print(weathers[weatherSel])\r\n\r\n\r\n}\r\n\r\n//GET POINTS OF TEXT\r\nfunction genType(txtString, txtSize) {\r\n\t// grab bounding box of text \r\n\tlet bounds = font.textBounds(txtString, 0, 0, txtSize);\r\n\r\n\t// textToPoints(txt, x, y, size, options) \r\n\tpoints = font.textToPoints(txtString, -bounds.w / 2, bounds.h / 2, txtSize, {\r\n\t\tsampleFactor: .07, // (default=.1), higher = more points \r\n\t\tsimplifyThreshold: 0 // if not 0, collinear points are removed from the polygon \r\n\t});\r\n}\r\n\r\n//EXPORT PNG\r\nfunction exportImage() {\r\n\tsave('WindDisplay.png');\r\n}"
    }
  ]
}